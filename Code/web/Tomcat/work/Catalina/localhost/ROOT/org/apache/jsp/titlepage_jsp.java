/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.13
 * Generated at: 2018-11-28 17:23:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.*;
import java.util.*;
import pkg.SongDriver;
import pkg.Artist;
import pkg.Playlist;
import pkg.Listener;
import pkg.Song;
import pkg.Album;

public final class titlepage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


		public void outputFave(Listener list, JspWriter out) throws IOException
		{
			ArrayList<String> favorites = list.returnFaves();
			out.println("Favorites:");
		    for(int i=0; i<favorites.size(); i++)
			{
				out.println(favorites.get(i));
		 	}
		}
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("pkg.SongDriver");
    _jspx_imports_classes.add("pkg.Artist");
    _jspx_imports_classes.add("pkg.Song");
    _jspx_imports_classes.add("pkg.Listener");
    _jspx_imports_classes.add("pkg.Album");
    _jspx_imports_classes.add("pkg.Playlist");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<head>\n");
      out.write("  <link rel=\"stylesheet\" type=\"text/css\" href=\"theme.css\">\n");
      out.write("</head>\n");
      out.write("<html>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\t");

	  SongDriver load = new SongDriver();
	  session.setAttribute("load",load);
	  /*
	  	Basically doing filler albums and songs so the website isn't blank just as a test
	  */
	  Listener list1 = new Listener("Atriole", "12345678");
      Artist artist1 = new Artist("Drake");
      Playlist play1 = new Playlist(20, "Jams");

      Album album1 = new Album(artist1.getArtistName(), "Hotline Bling");
      artist1.addAlbum(album1);
      Song song1 = new Song("Hotling Bling", artist1.getArtistName(), album1.getAlbumName());
      Song song2 = new Song("9", artist1.getArtistName(), album1.getAlbumName());
      Song song3 = new Song("U with Me?", artist1.getArtistName(), album1.getAlbumName());
      Song song4 = new Song("Feel No Ways", artist1.getArtistName(), album1.getAlbumName());
      Song song5 = new Song("Hype", artist1.getArtistName(), album1.getAlbumName());
      Album album2 = new Album(artist1.getArtistName(), "If you're reading this it's too late"); 
      
      artist1.addAlbum(album2);
      Song song7 = new Song("Star 67", artist1.getArtistName(), album2.getAlbumName());
      Song song8 = new Song("6 God", artist1.getArtistName(), album2.getAlbumName());
      Song song9 = new Song("Jungle", artist1.getArtistName(), album2.getAlbumName());
      
      Artist artist2 = new Artist("Kanye");
      
      Album album3 = new Album(artist2.getArtistName(), "Yeezus");
      Song song10 = new Song("Black SkinHead", artist2.getArtistName(), album3.getAlbumName());
      Song song11 = new Song("I'm in it", artist2.getArtistName(), album3.getAlbumName());
      artist2.addAlbum(album3);

      album1.addSong(song1);
      album1.addSong(song2);
      album1.addSong(song3);
      album1.addSong(song4);
      album1.addSong(song5);

      album2.addSong(song7);
      album2.addSong(song8);
      album2.addSong(song9);
      album3.addSong(song10);
      album3.addSong(song11);

      play1.addSong(song1);
      play1.addSong(song3);
      play1.addSong(song4);
      play1.addSong(song5);
      play1.addSong(song9);
      play1.addSong(song7);
      play1.addSong(song8);

      list1.addToFaves(song7);
      list1.addToFaves(song8);

	
      out.write("\n");
      out.write("\n");
      out.write("\t<script language=\"javascript\" type=\"text/javascript\"> \n");
      out.write("\tfunction doSubmit() \n");
      out.write("\t{ \n");
      out.write("\twindow.open(\"login.jsp\",\"_self\"); \n");
      out.write("\t} \n");
      out.write("</script>\n");
      out.write("\t\n");
      out.write("\t<html:button property=\"button\" onclick=\"doSubmit();\"/> \n");
      out.write("\t\tCreate Account\n");
      out.write("\t</html:button>\n");
      out.write("<p>\n");
      out.write("\tOBJECT ORIENTED PLAYLISTS\n");
      out.write("</p>\n");
      out.write("\t<div class=\"topnav\">\n");
      out.write("\t\t<script type=\"text/javascript\" src= \"SongDriver.java\">\n");
      out.write("\n");
      out.write("\t\t</script>\n");
      out.write("\t  <a class=\"active\" href=\"#Home\">Home</a>\n");
      out.write("\t  <a href=\"#Playlists\">Playlists</a>\n");
      out.write("\t  <a href=\"#Favorites\">Favorites</a>\n");
      out.write("\t  <input type=\"text\" placeholder=\"Search..\">\n");
      out.write("\t</div>\n");
      out.write("<p>\n");
      out.write("\t");
      out.write('\n');
      out.write('	');

		outputFave(list1);
		list1.printFaves();
	
      out.write("\n");
      out.write("</p>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
